from flask import Flask, render_template, request
import tensorflow as tf
from tensorflow.keras.preprocessing import image  # type: ignore
import numpy as np
import os
from werkzeug.utils import secure_filename

app = Flask(__name__)

# Load your trained model
MODEL_PATH = 'model/crop_disease_model_tf.keras'

# Check if model exists
if not os.path.exists(MODEL_PATH):
    raise FileNotFoundError(f"Model file not found at {MODEL_PATH}")

model = tf.keras.models.load_model(MODEL_PATH)

# Define your class labels (same order as during training)
class_names = ['Pepper__bell___Bacterial_spot', 'Pepper__bell___healthy',
               'Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy',
               'Tomato_Bacterial_spot', 'tomato_healthy']

UPLOAD_FOLDER = 'static/uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Ensure the upload folder exists
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Max file size (16MB)
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

def preprocess_image(image_path):
    """Helper function to preprocess the image"""
    img = image.load_img(image_path, target_size=(128, 128))  # Use model input size
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0
    return img_array

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/disease-prediction')
def prediction_page():
    return render_template('disease_prediction.html')

@app.route('/predict', methods=['POST'])
def predict():
    if 'image' not in request.files:
        return render_template('disease_prediction.html', prediction="No file selected")

    file = request.files['image']
    if file.filename == '':
        return render_template('disease_prediction.html', prediction="No file selected")

    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(filepath)

    try:
        # Preprocess the image
        img_array = preprocess_image(filepath)

        # Predict
        prediction = model.predict(img_array)
        predicted_class = class_names[np.argmax(prediction[0])]
        confidence = np.max(prediction[0]) * 100
threshold = 0.50  # 50%
        if confidence < threshold:
            result = f"Unknown Disease (Confidence: {confidence*100:.2f}%)"
        else:
            result = f"{predicted_class} ({confidence*100:.2f}% confidence)"

        return render_template('disease_prediction.html', prediction=result)
    except Exception as e:
        return render_template('disease_prediction.html', prediction=f"Error during prediction: {str(e)}")
